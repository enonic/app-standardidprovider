name: Gradle Build

on:
  push:
  repository_dispatch:
    types: [ xp ]

concurrency: build-${{ github.event.client_payload.ref || github.ref }}

jobs:
  publish_vars:
    runs-on: ubuntu-latest

    outputs:
      publish: ${{ steps.publish_vars.outputs.release != 'true' && (env.ACTUAL_GITHUB_REF == 'refs/heads/master' || startsWith(env.ACTUAL_GITHUB_REF, 'refs/heads/7.')) }}
      repo: ${{ steps.publish_vars.outputs.repo }}

    steps:
      - name: Extract actual github.ref
        run: echo "ACTUAL_GITHUB_REF=${ACTUAL_REF}" >> $GITHUB_ENV
        env:
          ACTUAL_REF: ${{ github.event.client_payload.ref || github.ref }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: Get publishing variables
        id: publish_vars
        uses: enonic/release-tools/publish-vars@master
        env:
          PROPERTIES_PATH: './gradle.properties'

  build:
    runs-on: ubuntu-latest

    needs: publish_vars

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Prepare Gradle Arguments
        run: |
          BASE_ARGS="--refresh-dependencies build"
          PUBLISH_ARGS="publish -Pcom.enonic.xp.app.production=true -PrepoKey=${{ needs.publish_vars.outputs.repo }} -PrepoUser=ci -PrepoPassword=${{ secrets.ARTIFACTORY_PASSWORD }}"
          if [ "${{ needs.publish_vars.outputs.publish }}" == "true" ]; then
            GRADLE_ARGS="$BASE_ARGS $PUBLISH_ARGS"
          else
            GRADLE_ARGS="$BASE_ARGS"
          fi
          echo "GRADLE_ARGS=$GRADLE_ARGS" >> $GITHUB_ENV

      - name: Build with Gradle
        run: ./gradlew $GRADLE_ARGS

      - uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  dispatch:
    needs: [ publish_vars, build ]
    strategy:
      matrix:
        repo: [ "enonic/xp-distro" ]
    runs-on: ubuntu-latest
    if: needs.publish_vars.outputs.publish == 'true'
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: app-standardidprovider
          client-payload: >
            {"ref": "${{ github.event.client_payload.ref || github.ref }}"}
