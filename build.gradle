plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.5'
    id 'com.enonic.xp.app' version '3.5.0'
    id "com.github.node-gradle.node" version '7.1.0'
}

def xpVersion=version

app {
    name = 'com.enonic.xp.app.standardidprovider'
    group = 'com.enonic.xp'
    displayName = 'Standard ID Provider'
    systemVersion = "${xpVersion}"
    systemApp = true
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo('dev')
}

dependencies {
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.lib:lib-mustache:2.1.1"
    include "com.enonic.lib:lib-static:1.0.3"
    include "com.auth0:java-jwt:4.4.0"

    testImplementation 'org.mockito:mockito-core:5.13.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.1'
    testImplementation "com.enonic.xp:testing:${xpVersion}"
}

node {
    version = '20.13.1'
    download = true
}

tasks.register('npmInstallForce', NpmTask) {
    description = 'Update all project node dependencies'
    args = [ 'install', '--force' ]
}

tasks.register('lint', NpmTask) {
    dependsOn( 'npmInstall' )
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

tasks.register('webpack', NpmTask) {
    dependsOn( 'npmInstall', 'lint', 'javadoc' )
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (js, css, etc).'
    args = [ 'run', 'build' ]
    inputs.dir 'src/main'
    inputs.file 'webpack.config.js'
    outputs.dir "${buildDir}/resources/main"
}

tasks.register('cleanNode', Delete) {
    delete 'node_modules'
}

jar {
    def mainDir = file('build/resources/main')

    exclude 'static/**/*.less'

    fileTree("$mainDir/static/js") {
        exclude '_all.js'
    }.each { f -> exclude mainDir.toURI().relativize( file( f.path ).toURI() ).toString() }

    outputs.dir "$buildDir/resources/main"

    dependsOn += webpack
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

compileTestJava.configure {
    dependsOn( 'jar' )
}

test {
    useJUnitPlatform()
    systemProperty 'java.awt.headless', 'true'
    jvmArgs '-XX:TieredStopAtLevel=1'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport
